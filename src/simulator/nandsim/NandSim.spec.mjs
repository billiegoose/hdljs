import { NandSim, Logic } from './NandSim.mjs'

// Define Inputs
let sim = new NandSim()
let a = sim.addPin()
let b = sim.addPin()
let cin = sim.addPin()
sim.defineInput(a)
sim.defineInput(b)
sim.defineInput(cin)
sim.namePin(a, 'A')
sim.namePin(b, 'B')
sim.namePin(cin, 'C')

// Define Outputs
let sum = sim.addPin()
let carry = sim.addPin()
sim.defineOutput(sum)
sim.defineOutput(carry)
sim.namePin(sum, 'sum')
sim.namePin(carry, 'carry')

// Define internal junctions
let i0 = sim.addPin()
let i1 = sim.addPin()
let i2 = sim.addPin()
let hs = sim.addPin()
let j0 = sim.addPin()
let j1 = sim.addPin()
let j2 = sim.addPin()

// Define connections
sim.addNand(a, b, i0)
sim.addNand(a, i0, i1)
sim.addNand(b, i0, i2)
sim.addNand(i1, i2, hs)
sim.addNand(hs, cin, j0)
sim.addNand(hs, j0, j1)
sim.addNand(cin, j0, j2)
sim.addNand(j1, j2, sum)
sim.addNand(i0, j0, carry)





















// Tests
sim.setPins({ A: Logic.LO, B: Logic.LO, C: Logic.LO })
console.log(sim.readInputs())
console.log(sim.evalOutputs())

sim.setPins({ A: Logic.LO, B: Logic.HI, C: Logic.LO })
console.log(sim.readInputs())
console.log(sim.evalOutputs())

sim.setPins({ A: Logic.HI, B: Logic.LO, C: Logic.LO })
console.log(sim.readInputs())
console.log(sim.evalOutputs())

sim.setPins({ A: Logic.HI, B: Logic.HI, C: Logic.LO })
console.log(sim.readInputs())
console.log(sim.evalOutputs())


sim.setPins({ A: Logic.LO, B: Logic.LO, C: Logic.HI })
console.log(sim.readInputs())
console.log(sim.evalOutputs())

sim.setPins({ A: Logic.LO, B: Logic.HI, C: Logic.HI })
console.log(sim.readInputs())
console.log(sim.evalOutputs())

sim.setPins({ A: Logic.HI, B: Logic.LO, C: Logic.HI })
console.log(sim.readInputs())
console.log(sim.evalOutputs())

sim.setPins({ A: Logic.HI, B: Logic.HI, C: Logic.HI })
console.log(sim.readInputs())
console.log(sim.evalOutputs())

sim.setPins({ A: Logic.LO, B: Logic.LO, C: Logic.UK })
console.log(sim.readInputs())
console.log(sim.evalOutputs())

sim.setPins({ A: Logic.HI, B: Logic.HI, C: Logic.UK })
console.log(sim.readInputs())
console.log(sim.evalOutputs())



// // Define Inputs & Outputs
// let sim = new NandSim()
// let a = sim.addPin()
// let b = sim.addPin()
// let c = sim.addPin()
// let d = sim.addPin()
// let e = sim.addPin()
// sim.namePin(a, 'a')
// sim.namePin(b, 'b')
// sim.namePin(c, 'c')
// sim.namePin(d, 'd')
// sim.namePin(e, 'e')
// sim.defineInput(a)
// sim.defineOutput(e)

// // Define connections
// sim.addDFF(a, b)
// sim.addDFF(b, c)
// sim.addDFF(c, d)
// sim.addDFF(d, e)

// // Tests
// sim.setPins({ a: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('a', 'b', 'c', 'd', 'e'))
// sim.clock()
// sim.setPins({ a: Logic.LO })
// sim.evalOutputs()
// console.log(sim.readPins('a', 'b', 'c', 'd', 'e'))
// sim.clock()
// sim.setPins({ a: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('a', 'b', 'c', 'd', 'e'))
// sim.clock()
// sim.setPins({ a: Logic.LO })
// sim.evalOutputs()
// console.log(sim.readPins('a', 'b', 'c', 'd', 'e'))
// sim.clock()
// sim.setPins({ a: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('a', 'b', 'c', 'd', 'e'))

// sim.clock()
// sim.setPins({ a: Logic.UK })
// sim.evalOutputs()
// console.log(sim.readPins('a', 'b', 'c', 'd', 'e'))
// sim.clock()
// sim.setPins({ a: Logic.UK })
// sim.evalOutputs()
// console.log(sim.readPins('a', 'b', 'c', 'd', 'e'))
// sim.clock()
// sim.setPins({ a: Logic.UK })
// sim.evalOutputs()
// console.log(sim.readPins('a', 'b', 'c', 'd', 'e'))
// sim.clock()
// sim.setPins({ a: Logic.UK })
// sim.evalOutputs()
// console.log(sim.readPins('a', 'b', 'c', 'd', 'e'))
// sim.clock()
// sim.setPins({ a: Logic.UK })
// sim.evalOutputs()
// console.log(sim.readPins('a', 'b', 'c', 'd', 'e'))



// // Traveling ringbuffer?
// let sim = new NandSim()
// let i = sim.addPin()
// let a = sim.addPin()
// let b = sim.addPin()
// let c = sim.addPin()
// let d = sim.addPin()
// let e = sim.addPin()
// let o = sim.addPin()
// sim.namePin(i, 'in')
// sim.namePin(a, 'a')
// sim.namePin(b, 'b')
// sim.namePin(c, 'c')
// sim.namePin(d, 'd')
// sim.namePin(e, 'e')
// sim.namePin(o, 'out')
// sim.defineInput(i)
// sim.defineOutput(o)

// // Define connections
// sim.addDFF(a, b)
// sim.addDFF(b, c)
// sim.addDFF(c, d)
// sim.addDFF(d, e)
// sim.addDFF(e, o)

// sim.addNand(i, o, a)

// // Tests
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))

// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.HI })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.LO })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.LO })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.LO })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.LO })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.LO })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.LO })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))
// sim.clock()
// sim.setPins({ in: Logic.LO })
// sim.evalOutputs()
// console.log(sim.readPins('in', 'a', 'b', 'c', 'd', 'e', 'out'))