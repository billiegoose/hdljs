CHIP IICTransmitRange {
  IN reset, startAt[16], stopAt[16], sendStart, sendStop;
  OUT address[16], sda, scl, done;
  PARTS:
  // When to update the state register
  Or8Way(
    in[0]=resetState,
    in[1]=startDoneSignal,
    in[2]=byteDoneSignal,
    in[3]=ackDoneSignal,
    in[4]=stopDoneSignal,
    out=inc
  );
  // The state register
  IICState(
    inc=inc,
    reset=reset,
    // if (jump) goto byte0State 
    // (We only have one GOTO in this state machine, unless we add support for reading ACK and retransmitting)
    jump=jump,
    addr[0]=false,
    addr[1]=false,
    addr[2]=true,
    // the states
    out[0]=resetState,
    out[1]=startState,
    out[2]=byte0State,
    out[3]=ack0State,
    out[4]=byte1State,
    out[5]=ack1State,
    out[6]=stopState,
    out[7]=doneState,
    // used for printing state in test script
    out[0..7]=stateRegister
  );

  // State register derived values
  Or(a=byte0State, b=byte1State, out=anyByteState);
  Or(a=ack0State, b=ack1State, out=anyAckState);

  Or8Way(in[0]=startState, in[1]=byte0State, in[2]=ack0State, out=byte0Sel);
  Or8Way(in[0]=byte1State, in[1]=ack0State, in[2]=stopState, in[3]=doneState, out=byte1Sel);

  Blip(in=startState, out=beginStart);

  Blip(in=byte0State, out=beginByte0);

  Blip(in=byte1State, out=beginByte1);

  Or(a=beginByte0, b=beginByte1, out=beginByte);

  Blip(in=anyAckState, out=beginAck);

  Blip(in=doneState, out=beginDone);

  // we want to target a transmission speed of 100 kbit/s
  // 100kbit/s is 12500 byte/s
  // the clock speed is 25MHz
  // (25,000,000 clock cycles / 1s) * (1s / 12500 bytes) = 2000 cycles / byte
  // Each byte has 8 bits and each bit as 4 iic phases so 
  // 2000 cycles / byte * 32 iic cycles / byte
  // = 62.5 which we'll round to 62
  // 62 = 0011 1110
  // The ClockDivider "max" value is actually 1/2 the period so we want
  // 31 = 0001 1111
  ClockDivider(
    reset=reset,
    max[0]=false,
    max[1]=true,
    max[2]=true,
    max[3]=true,
    max[4]=true,
    max[5]=true,
    out=clock0
  );

  // start and stop addresses
  Equal(a=pc, b=startAt, out=atStart);
  Equal(a=pc, b=stopAt, out=atStop);

  // The address counter
  PC(inc=beginByte0, in=startAt, load=beginStart, out=pc);

  // Select the byte to send
  ROM32KLessAnnoying(address=pc, out[0..7]=byte2, out[8..15]=byte1);
  Mux16(a[0..7]=byte1, b[0..7]=byte2, sel=byte0Sel, out[0..7]=byte);

  // Generate SDA and SCL signals
  And(a=clock0, b=startState, out=startClock);
  IICStart(
    clock0=startClock,
    reset=beginStart,
    sda=sdaStart,
    scl=sclStart,
    done=startDone
  );
  And(a=startDone, b=startState, out=startDoneSignal);

  And(a=clock0, b=anyByteState, out=anyByteClock);
  IICByte(
    clock0=anyByteClock,
    reset=beginByte,
    in=byte,
    sda=sdaByte,
    scl=sclByte,
    done=byteDone
  );
  And(a=byteDone, b=anyByteState, out=byteDoneSignal);

  And(a=clock0, b=anyAckState, out=anyAckClock);
  IICAckReceive(
    clock0=anyAckClock,
    reset=beginAck,
    sda=sdaAck,
    scl=sclAck,
    done=ackDone
  );
  And(a=ackDone, b=anyAckState, out=ackDoneSignal);

  And(a=clock0, b=stopState, out=stopClock);
  IICStop(
    clock0=stopClock,
    reset=beginDone,
    sda=sdaStop,
    scl=sclStop,
    done=stopDone
  );
  And(a=stopDone, b=stopState, out=stopDoneSignal);

  // Determine which signal gets put on the actual sda and scl lines
  And(a=sdaStart, b=startState, out=sdaStartCut);
  And(a=sclStart, b=startState, out=sclStartCut);

  And(a=sdaByte, b=anyByteState, out=sdaByteCut);
  And(a=sclByte, b=anyByteState, out=sclByteCut);

  And(a=sdaAck, b=anyAckState, out=sdaAckCut);
  And(a=sclAck, b=anyAckState, out=sclAckCut);

  And(a=sdaStop, b=stopState, out=sdaStopCut);
  And(a=sclStop, b=stopState, out=sclStopCut);

  And(a=true, b=doneState, out=sdaIdleCut);
  And(a=true, b=doneState, out=sclIdleCut);

  Or8Way(
    in[0]=sdaStartCut,
    in[1]=sdaByteCut,
    in[2]=sdaAckCut,
    in[3]=sdaStopCut,
    in[4]=sdaIdleCut,
    out=sda
  );

  Or8Way(
    in[0]=sclStartCut,
    in[1]=sclByteCut,
    in[2]=sclAckCut,
    in[3]=sclStopCut,
    in[4]=sclIdleCut,
    out=scl
  );

  // If there are more bytes, jump back to byte0State
  Not(in=atStop, out=natStop);
  And(a=natStop, b=ack1State, out=moreWords);
  And(a=ackDoneSignal, b=moreWords, out=jump);

  // For debugging fun
  Copy16(in=pc, out=address);
}
