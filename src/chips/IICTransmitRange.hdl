CHIP IICTransmitRange {
  IN reset, startAt[16], stopAt[16], sendStart, sendStop;
  OUT address[16], sda, scl, done;
  PARTS:
  // When to update the state register
  Blip(in=reset, out=blipReset);
  Or8Way(
    in[0]=blipReset,
    in[1]=startDone,
    in[2]=byteDone,
    in[3]=ackDone,
    in[4]=stopDone,
    out=updateRegister
  );
  // The state register
  Register(
    in[0]=nextStartState,
    in[1]=nextByte0State,
    in[2]=nextAck0State,
    in[3]=nextByte1State,
    in[4]=nextAck1State,
    in[5]=nextStopState,
    in[6]=nextDoneState,
    load=updateRegister,
    out[0]=startState,
    out[1]=byte0State,
    out[2]=ack0State,
    out[3]=byte1State,
    out[4]=ack1State,
    out[5]=stopState,
    out[6]=doneState
  );

  // State register derived values
  Or(a=byte0State, b=byte1State, out=anyByteState);
  Or(a=ack0State, b=ack1State, out=anyAckState);

  Blip(in=startState, out=beginStart);

  Blip(in=byte0State, out=beginByte0);

  Blip(in=anyByteState, out=beginByte);

  Blip(in=anyAckState, out=beginAck);

  Blip(in=doneState, out=beginDone);

  // we want to target a transmission speed of 100 kbit/s
  // 100kbit/s is 12500 byte/s
  // the clock speed is 25MHz
  // (25,000,000 clock cycles / 1s) * (1s / 12500 bytes) = 2000 cycles / byte
  // Each byte has 8 bits and each bit as 4 iic phases so 
  // 2000 cycles / byte * 32 iic cycles / byte
  // = 62.5 which we'll round to 62
  // 62 = 0011 1110
  // The ClockDivider "max" value is actually 1/2 the period so we want
  // 31 = 0001 1111
  ClockDivider(
    reset=reset,
    max[0]=false,
    max[1]=true,
    max[2]=true,
    max[3]=true,
    max[4]=true,
    max[5]=true,
    out=clock0
  );

  // start and stop addresses
  Equal(a=pc, b=startAt, out=atStart);
  Equal(a=pc, b=stopAt, out=atStop);

  // The address counter
  PC(inc=beginByte0, in=startAt, load=beginStart, out=pc);

  // Select the byte to send
  ROM32KLessAnnoying(address=pc, out[0..7]=byte2, out[8..15]=byte1);
  Mux16(a[0..7]=byte1, b[0..7]=byte2, sel=byte1State, out[0..7]=byte);

  // Generate SDA and SCL signals
  IICStart(
    clock0=clock0,
    reset=beginStart,
    sda=sdaStart,
    scl=sclStart,
    done=startDone
  );
  IICByte(
    clock0=clock0,
    reset=beginByte,
    in=byte,
    sda=sdaByte,
    scl=sclByte,
    done=byteDone
  );
  IICAckReceive(
    clock0=clock0,
    reset=beginAck,
    sda=sdaAck,
    scl=sclAck,
    done=ackDone
  );
  IICStop(
    clock0=clock0,
    reset=beginDone,
    sda=sdaStop,
    scl=sclStop,
    done=stopDone
  );

  // Determine which signal gets put on the actual sda and scl lines
  And(a=sdaStart, b=startState, out=sdaStartCut);
  And(a=sclStart, b=startState, out=sclStartCut);

  And(a=sdaByte, b=anyByteState, out=sdaByteCut);
  And(a=sclByte, b=anyByteState, out=sclByteCut);

  And(a=sdaAck, b=anyAckState, out=sdaAckCut);
  And(a=sclAck, b=anyAckState, out=sclAckCut);

  And(a=sdaStop, b=stopState, out=sdaStopCut);
  And(a=sclStop, b=stopState, out=sclStopCut);

  And(a=true, b=doneState, out=sdaIdleCut);
  And(a=true, b=doneState, out=sclIdleCut);

  Or8Way(
    in[0]=sdaStartCut,
    in[1]=sdaByteCut,
    in[2]=sdaAckCut,
    in[3]=sdaStopCut,
    in[4]=sdaIdleCut,
    out=sda
  );

  Or8Way(
    in[0]=sclStartCut,
    in[1]=sclByteCut,
    in[2]=sclAckCut,
    in[3]=sclStopCut,
    in[4]=sclIdleCut,
    out=scl
  );

  // Update state machine.
  // startState =
  Copy(in=reset, out=nextStartState);

  // byte0State =
  Not(in=atStop, out=natStop);
  And(a=natStop, b=ack1State, out=moreWords);
  Or(a=startState, b=moreWords, out=nextByte0State);

  // ack0State =
  Copy(in=byte0State, out=nextAck0State);

  // byte1State =
  And(a=natStop, b=ack0State, out=nextByte1State);

  // ack1State =
  Copy(in=byte1State, out=nextAck1State);

  // stopState =
  And(a=atStop, b=anyAckState, out=nextStopState);

  // doneState =
  Copy(in=stopState, out=nextDoneState);

  // For debugging fun
  Copy16(in=pc, out=address);
}
