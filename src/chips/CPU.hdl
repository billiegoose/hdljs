CHIP CPU {
  IN  inM[16],         // M value input  (M = contents of RAM[A])
      instruction[16], // Instruction for execution
      reset;           // Signals whether to re-start the current
                       // program (reset==1) or continue executing
                       // the current program (reset==0).

  OUT outM[16],        // M value output
      writeM,          // Write to M? 
      addressM[15],    // Address in data memory (of M)
      pc[15];          // address of next instruction

  PARTS:
  // ALU computation
  Mux16(sel=instruction[12], a=A, b=inM, out=AM);
  ALU(zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], x=D, y=AM, out=comp, zr=zr, ng=ng);

  // Jump computation
  Nor(a=ng, b=zr, out=ps);
  And(a=instruction[2], b=ng, out=j1);
  And(a=instruction[1], b=zr, out=j2);
  And(a=instruction[0], b=ps, out=j3);
  Or(a=j1, b=j2, out=jx);
  Or(a=jx, b=j3, out=jy);
  And(a=instruction[15], b=jy, out=jump);
  Not(in=jump, out=njump);

  // D register
  And(a=instruction[15], b=instruction[4], out=loadD);
  DRegister(load=loadD, in=comp, out=D);

  // A register
  Not(in=instruction[15], out=ni);
  Or(a=ni, b=instruction[5], out=loadA);
  Mux16(sel=instruction[15], a=instruction, b=comp, out=Ain);
  ARegister(load=loadA, in=Ain, out=A);

  // Program Counter
  PC(load=jump, inc=njump, reset=reset, in=A, out[0..14]=pc);

  // M register
  And(a=instruction[15], b=instruction[3], out=writeM);
  Or16(a=false, b=A, out[0..14]=addressM);
  Or16(a=false, b=comp, out=outM);
}