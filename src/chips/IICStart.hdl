CHIP IICStart {
  IN clock0, reset, start;
  OUT sda, scl, done;

  PARTS:
  // |        | clock0 | clock1 | scl | sda |
  // | phase0 |    0   |    0   |  1  |  0  |
  // | phase1 |    1   |    0   |  1  |  0  |
  // | phase2 |    0   |    1   |  0  |  0  |
  // | phase3 |    1   |    1   |  0  |  0  |

  // Start logic
  Blip(in=start, out=startRise);
  Not(in=startRise, out=nstartRise);
  FastBit(
    in=startRise,
    load=startRise,
    reset=reset,
    out=active
  );
  And(a=clock0, b=active, out=activeClock);
  // Reset logic
  Or(a=reset, b=doneInternal, out=resetInternal);

  Copy(in=false, out=sda);
  // Catch trailing edge
  Blop(in=activeClock, out=clockFall);
  Or(a=clockFall, b=startRise, out=loadScl);
  FastBit(
    in=startRise,
    load=loadScl,
    reset=resetInternal,
    out=sclInternal
  );
  Copy(in=sclInternal, out=scl);

  Blop(in=sclInternal, out=sclFall);
  FastBit(
    in=true,
    load=sclFall,
    reset=resetInternal,
    slowOut=phase2
  );

  And(a=clockFall, b=phase2, out=finalPhase);
  Or(a=finalPhase, b=startRise, out=loadDone);
  FastBit(
    in=nstartRise,
    load=loadDone,
    reset=reset,
    out=doneInternal
  );
  Copy(in=doneInternal, out=done);
}
