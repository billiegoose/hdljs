
global.chipRegistry = new Map();

import { ChipDef } from './components/ChipDef.mjs';

export const Nand = new ChipDef(`
CHIP Nand {
  IN a,b;
  OUT out;
}`)

export const Copy = new ChipDef(`
CHIP Copy {
  IN in;
  OUT out;
}`);

export const DFF = new ChipDef(`
CHIP DFF {
  IN in;
  OUT out;
}`);

export const Not = new ChipDef(`
CHIP Not {
  IN in;
  OUT out;

  PARTS:
  Nand(a=in, b=in, out=out);
}`).test(`
|  in   |  out  |
|   0   |   1   |
|   1   |   0   |
`);

export const And = new ChipDef(`
CHIP And {
  IN a, b;
  OUT out;

  PARTS:
  Nand(a=a, b=b, out=c);
  Not(in=c, out=out);
}`).test(`
|   a   |   b   |  out  |
|   0   |   0   |   0   |
|   0   |   1   |   0   |
|   1   |   0   |   0   |
|   1   |   1   |   1   |
`)

export const Or = new ChipDef(`
CHIP Or {
  IN a, b;
  OUT out;

  PARTS:
  Not(in=a, out=na);
  Not(in=b, out=nb);
  Nand(a=na, b=nb, out=out);
}`).test(`
|   a   |   b   |  out  |
|   0   |   0   |   0   |
|   0   |   1   |   1   |
|   1   |   0   |   1   |
|   1   |   1   |   1   |
`)

export const Xor = new ChipDef(`
CHIP Xor {
  IN a, b;
  OUT out;

  PARTS:
  Nand(a=a, b=b, out=x);
  Nand(a=a, b=x, out=y);
  Nand(a=x, b=b, out=z);
  Nand(a=y, b=z, out=out);
}`).test(`
|   a   |   b   |  out  |
|   0   |   0   |   0   |
|   0   |   1   |   1   |
|   1   |   0   |   1   |
|   1   |   1   |   0   |
`)

export const Mux = new ChipDef(`
CHIP Mux {
  IN sel, a, b;
  OUT out;

  PARTS:
  Not(in=sel, out=nsel);
  Nand(a=nsel, b=a, out=sela);
  Nand(a=sel, b=b, out=selb);
  Nand(a=sela, b=selb, out=out);
}`).test(`
|   a   |   b   |  sel  |  out  |
|   0   |   0   |   0   |   0   |
|   0   |   0   |   1   |   0   |
|   0   |   1   |   0   |   0   |
|   0   |   1   |   1   |   1   |
|   1   |   0   |   0   |   1   |
|   1   |   0   |   1   |   0   |
|   1   |   1   |   0   |   1   |
|   1   |   1   |   1   |   1   |
`)

export const DMux = new ChipDef(`
CHIP DMux {
  IN sel, in;
  OUT a, b;

  PARTS:
  Not(in=sel, out=nsel);
  And(a=in, b=nsel, out=a);
  And(a=in, b=sel, out=b);
}`).test(`
|  in   |  sel  |   a   |   b   |
|   0   |   0   |   0   |   0   |
|   0   |   1   |   0   |   0   |
|   1   |   0   |   1   |   0   |
|   1   |   1   |   0   |   1   |
`)

export const Or8Way = new ChipDef(`
CHIP Or8Way {
  IN in[8];
  OUT out;

  PARTS:
  Or(a=in[0], b=in[1], out=c0);
  Or(a=in[2], b=in[3], out=c1);
  Or(a=in[4], b=in[5], out=c2);
  Or(a=in[6], b=in[7], out=c3);
  Or(a=c0, b=c1, out=d0);
  Or(a=c2, b=c3, out=d1);
  Or(a=d0, b=d1, out=out);
}`).test(`
|     in     | out |
|  00000000  |  0  |
|  11111111  |  1  |
|  00010000  |  1  |
|  00000001  |  1  |
|  00100110  |  1  |
`)

export const Or16Way = new ChipDef(`
CHIP Or16Way {
  IN in[16];
  OUT out;

  PARTS:
  Or8Way(in=in[0..7], out=low);
  Or8Way(in=in[8..15], out=high);
  Or(a=low, b=high, out=out);
}`)

export const Not16 = new ChipDef(`
CHIP Not16 {
  IN in[16];
  OUT out[16];

  PARTS:
  Not(in=in[0], out=out[0]);
  Not(in=in[1], out=out[1]);
  Not(in=in[2], out=out[2]);
  Not(in=in[3], out=out[3]);
  Not(in=in[4], out=out[4]);
  Not(in=in[5], out=out[5]);
  Not(in=in[6], out=out[6]);
  Not(in=in[7], out=out[7]);
  Not(in=in[8], out=out[8]);
  Not(in=in[9], out=out[9]);
  Not(in=in[10],out=out[10]);
  Not(in=in[11],out=out[11]);
  Not(in=in[12],out=out[12]);
  Not(in=in[13],out=out[13]);
  Not(in=in[14],out=out[14]);
  Not(in=in[15],out=out[15]);
}`).test(`
|        in        |       out        |
| 0000000000000000 | 1111111111111111 |
| 1111111111111111 | 0000000000000000 |
| 1010101010101010 | 0101010101010101 |
| 0011110011000011 | 1100001100111100 |
| 0001001000110100 | 1110110111001011 |
`)

export const And16 = new ChipDef(`
CHIP And16 {
  IN a[16], b[16];
  OUT out[16];

  PARTS:
  And(a=a[0], b=b[0], out=out[0]);
  And(a=a[1], b=b[1], out=out[1]);
  And(a=a[2], b=b[2], out=out[2]);
  And(a=a[3], b=b[3], out=out[3]);
  And(a=a[4], b=b[4], out=out[4]);
  And(a=a[5], b=b[5], out=out[5]);
  And(a=a[6], b=b[6], out=out[6]);
  And(a=a[7], b=b[7], out=out[7]);
  And(a=a[8], b=b[8], out=out[8]);
  And(a=a[9], b=b[9], out=out[9]);
  And(a=a[10], b=b[10], out=out[10]);
  And(a=a[11], b=b[11], out=out[11]);
  And(a=a[12], b=b[12], out=out[12]);
  And(a=a[13], b=b[13], out=out[13]);
  And(a=a[14], b=b[14], out=out[14]);
  And(a=a[15], b=b[15], out=out[15]);
}`).test(`
|        a         |        b         |       out        |
| 0000000000000000 | 0000000000000000 | 0000000000000000 |
| 0000000000000000 | 1111111111111111 | 0000000000000000 |
| 1111111111111111 | 1111111111111111 | 1111111111111111 |
| 1010101010101010 | 0101010101010101 | 0000000000000000 |
| 0011110011000011 | 0000111111110000 | 0000110011000000 |
| 0001001000110100 | 1001100001110110 | 0001000000110100 |
`)

export const Or16 = new ChipDef(`
CHIP Or16 {
  IN a[16], b[16];
  OUT out[16];

  PARTS:
  Or(a=a[0], b=b[0], out=out[0]);
  Or(a=a[1], b=b[1], out=out[1]);
  Or(a=a[2], b=b[2], out=out[2]);
  Or(a=a[3], b=b[3], out=out[3]);
  Or(a=a[4], b=b[4], out=out[4]);
  Or(a=a[5], b=b[5], out=out[5]);
  Or(a=a[6], b=b[6], out=out[6]);
  Or(a=a[7], b=b[7], out=out[7]);
  Or(a=a[8], b=b[8], out=out[8]);
  Or(a=a[9], b=b[9], out=out[9]);
  Or(a=a[10], b=b[10], out=out[10]);
  Or(a=a[11], b=b[11], out=out[11]);
  Or(a=a[12], b=b[12], out=out[12]);
  Or(a=a[13], b=b[13], out=out[13]);
  Or(a=a[14], b=b[14], out=out[14]);
  Or(a=a[15], b=b[15], out=out[15]);
}`).test(`
|        a         |        b         |       out        |
| 0000000000000000 | 0000000000000000 | 0000000000000000 |
| 0000000000000000 | 1111111111111111 | 1111111111111111 |
| 1111111111111111 | 1111111111111111 | 1111111111111111 |
| 1010101010101010 | 0101010101010101 | 1111111111111111 |
| 0011110011000011 | 0000111111110000 | 0011111111110011 |
| 0001001000110100 | 1001100001110110 | 1001101001110110 |
`)

export const DMux4Way = new ChipDef(`
CHIP DMux4Way {
  IN sel[2], in;
  OUT a, b, c, d;

  PARTS:
  DMux(in=in, sel=sel[1], a=x, b=y);
  DMux(in=x, sel=sel[0], a=a, b=b);
  DMux(in=y, sel=sel[0], a=c, b=d);
}`).test(`
| in  | sel  |  a  |  b  |  c  |  d  |
|  0  |  00  |  0  |  0  |  0  |  0  |
|  0  |  01  |  0  |  0  |  0  |  0  |
|  0  |  10  |  0  |  0  |  0  |  0  |
|  0  |  11  |  0  |  0  |  0  |  0  |
|  1  |  00  |  1  |  0  |  0  |  0  |
|  1  |  01  |  0  |  1  |  0  |  0  |
|  1  |  10  |  0  |  0  |  1  |  0  |
|  1  |  11  |  0  |  0  |  0  |  1  |
`)

export const Mux16 = new ChipDef(`
CHIP Mux16 {
  IN sel, a[16], b[16];
  OUT out[16];

  PARTS:
  Mux(a=a[0], b=b[0], sel=sel, out=out[0]);
  Mux(a=a[1], b=b[1], sel=sel, out=out[1]);
  Mux(a=a[2], b=b[2], sel=sel, out=out[2]);
  Mux(a=a[3], b=b[3], sel=sel, out=out[3]);
  Mux(a=a[4], b=b[4], sel=sel, out=out[4]);
  Mux(a=a[5], b=b[5], sel=sel, out=out[5]);
  Mux(a=a[6], b=b[6], sel=sel, out=out[6]);
  Mux(a=a[7], b=b[7], sel=sel, out=out[7]);
  Mux(a=a[8], b=b[8], sel=sel, out=out[8]);
  Mux(a=a[9], b=b[9], sel=sel, out=out[9]);
  Mux(a=a[10], b=b[10], sel=sel, out=out[10]);
  Mux(a=a[11], b=b[11], sel=sel, out=out[11]);
  Mux(a=a[12], b=b[12], sel=sel, out=out[12]);
  Mux(a=a[13], b=b[13], sel=sel, out=out[13]);
  Mux(a=a[14], b=b[14], sel=sel, out=out[14]);
  Mux(a=a[15], b=b[15], sel=sel, out=out[15]);
}`).test(`
|        a         |        b         | sel |       out        |
| 0000000000000000 | 0000000000000000 |  0  | 0000000000000000 |
| 0000000000000000 | 0000000000000000 |  1  | 0000000000000000 |
| 0000000000000000 | 0001001000110100 |  0  | 0000000000000000 |
| 0000000000000000 | 0001001000110100 |  1  | 0001001000110100 |
| 1001100001110110 | 0000000000000000 |  0  | 1001100001110110 |
| 1001100001110110 | 0000000000000000 |  1  | 0000000000000000 |
| 1010101010101010 | 0101010101010101 |  0  | 1010101010101010 |
| 1010101010101010 | 0101010101010101 |  1  | 0101010101010101 |
`)

export const DMux8Way = new ChipDef(`
CHIP DMux8Way {
  IN sel[3], in;
  OUT a, b, c, d, e, f, g, h;

  PARTS:
  DMux(in=in, sel=sel[2], a=x, b=y);
  DMux4Way(in=x, sel=sel[0..1], a=a, b=b, c=c, d=d);
  DMux4Way(in=y, sel=sel[0..1], a=e, b=f, c=g, d=h);
}`).test(`
| in  |  sel  |  a  |  b  |  c  |  d  |  e  |  f  |  g  |  h  |
|  0  |  000  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  0  |  001  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  0  |  010  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  0  |  011  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  0  |  100  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  0  |  101  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  0  |  110  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  0  |  111  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  1  |  000  |  1  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
|  1  |  001  |  0  |  1  |  0  |  0  |  0  |  0  |  0  |  0  |
|  1  |  010  |  0  |  0  |  1  |  0  |  0  |  0  |  0  |  0  |
|  1  |  011  |  0  |  0  |  0  |  1  |  0  |  0  |  0  |  0  |
|  1  |  100  |  0  |  0  |  0  |  0  |  1  |  0  |  0  |  0  |
|  1  |  101  |  0  |  0  |  0  |  0  |  0  |  1  |  0  |  0  |
|  1  |  110  |  0  |  0  |  0  |  0  |  0  |  0  |  1  |  0  |
|  1  |  111  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  1  |
`)

export const Mux4Way16 = new ChipDef(`
CHIP Mux4Way16 {
  IN sel[2], a[16], b[16], c[16], d[16];
  OUT out[16];

  PARTS:
  Mux16(a=a, b=b, sel=sel[0], out=x);
  Mux16(a=c, b=d, sel=sel[0], out=y);
  Mux16(a=x, b=y, sel=sel[1], out=out);
}`).test(`
|        a         |        b         |        c         |        d         | sel  |       out        |
| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  00  | 0000000000000000 |
| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  01  | 0000000000000000 |
| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  10  | 0000000000000000 |
| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  11  | 0000000000000000 |
| 0001001000110100 | 1001100001110110 | 1010101010101010 | 0101010101010101 |  00  | 0001001000110100 |
| 0001001000110100 | 1001100001110110 | 1010101010101010 | 0101010101010101 |  01  | 1001100001110110 |
| 0001001000110100 | 1001100001110110 | 1010101010101010 | 0101010101010101 |  10  | 1010101010101010 |
| 0001001000110100 | 1001100001110110 | 1010101010101010 | 0101010101010101 |  11  | 0101010101010101 |
`)

export const Mux8Way16 = new ChipDef(`
CHIP Mux8Way16 {
  IN sel[3], a[16], b[16], c[16], d[16], e[16], f[16], g[16], h[16];
  OUT out[16];

  PARTS:
  Mux4Way16(a=a, b=b, c=c, d=d, sel=sel[0..1], out=x);
  Mux4Way16(a=e, b=f, c=g, d=h, sel=sel[0..1], out=y);
  Mux16(a=x, b=y, sel=sel[2], out=out);
}`).test(`
|        a         |        b         |        c         |        d         |        e         |        f         |        g         |        h         |  sel  |       out        |
| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  000  | 0000000000000000 |
| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  001  | 0000000000000000 |
| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  010  | 0000000000000000 |
| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  011  | 0000000000000000 |
| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  100  | 0000000000000000 |
| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  101  | 0000000000000000 |
| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  110  | 0000000000000000 |
| 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 | 0000000000000000 |  111  | 0000000000000000 |
| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  000  | 0001001000110100 |
| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  001  | 0010001101000101 |
| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  010  | 0011010001010110 |
| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  011  | 0100010101100111 |
| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  100  | 0101011001111000 |
| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  101  | 0110011110001001 |
| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  110  | 0111100010011010 |
| 0001001000110100 | 0010001101000101 | 0011010001010110 | 0100010101100111 | 0101011001111000 | 0110011110001001 | 0111100010011010 | 1000100110101011 |  111  | 1000100110101011 |
`)

export const HalfAdder = new ChipDef(`
CHIP HalfAdder {
  IN a, b;
  OUT sum, carry;

  PARTS:
  Xor(a=a, b=b, out=sum);
  And(a=a, b=b, out=carry);
}`).test(`
|   a   |   b   |  sum  | carry |
|   0   |   0   |   0   |   0   |
|   0   |   1   |   1   |   0   |
|   1   |   0   |   1   |   0   |
|   1   |   1   |   0   |   1   |
`)

export const FullAdder = new ChipDef(`
CHIP FullAdder {
  IN a, b, c;
  OUT sum, carry;

  PARTS:
  HalfAdder(a=a, b=b, sum=x, carry=y);
  HalfAdder(a=x, b=c, sum=sum, carry=z);
  Or(a=y, b=z, out=carry);
}`).test(`
|   a   |   b   |   c   |  sum  | carry |
|   0   |   0   |   0   |   0   |   0   |
|   0   |   0   |   1   |   1   |   0   |
|   0   |   1   |   0   |   1   |   0   |
|   0   |   1   |   1   |   0   |   1   |
|   1   |   0   |   0   |   1   |   0   |
|   1   |   0   |   1   |   0   |   1   |
|   1   |   1   |   0   |   0   |   1   |
|   1   |   1   |   1   |   1   |   1   |
`)

export const Add16 = new ChipDef(`
CHIP Add16 {
  IN a[16], b[16];
  OUT out[16], overflow;

  PARTS:
  HalfAdder(a=a[0], b=b[0], sum=out[0], carry=c1);
  FullAdder(a=a[1], b=b[1], c=c1, sum=out[1], carry=c2);
  FullAdder(a=a[2], b=b[2], c=c2, sum=out[2], carry=c3);
  FullAdder(a=a[3], b=b[3], c=c3, sum=out[3], carry=c4);
  FullAdder(a=a[4], b=b[4], c=c4, sum=out[4], carry=c5);
  FullAdder(a=a[5], b=b[5], c=c5, sum=out[5], carry=c6);
  FullAdder(a=a[6], b=b[6], c=c6, sum=out[6], carry=c7);
  FullAdder(a=a[7], b=b[7], c=c7, sum=out[7], carry=c8);
  FullAdder(a=a[8], b=b[8], c=c8, sum=out[8], carry=c9);
  FullAdder(a=a[9], b=b[9], c=c9, sum=out[9], carry=c10);
  FullAdder(a=a[10], b=b[10], c=c10, sum=out[10], carry=c11);
  FullAdder(a=a[11], b=b[11], c=c11, sum=out[11], carry=c12);
  FullAdder(a=a[12], b=b[12], c=c12, sum=out[12], carry=c13);
  FullAdder(a=a[13], b=b[13], c=c13, sum=out[13], carry=c14);
  FullAdder(a=a[14], b=b[14], c=c14, sum=out[14], carry=c15);
  FullAdder(a=a[15], b=b[15], c=c15, sum=out[15], carry=overflow);
}`).test(`
|        a         |        b         |       out        | overflow |
| 0000000000000000 | 0000000000000000 | 0000000000000000 |     0    |
| 0000000000000000 | 1111111111111111 | 1111111111111111 |     0    |
| 1111111111111111 | 1111111111111111 | 1111111111111110 |     1    |
| 1010101010101010 | 0101010101010101 | 1111111111111111 |     0    |
| 0011110011000011 | 0000111111110000 | 0100110010110011 |     0    |
| 0001001000110100 | 1001100001110110 | 1010101010101010 |     0    |
`)

export const Inc16 = new ChipDef(`
CHIP Inc16 {
  IN in[16];
  OUT out[16];

  PARTS:
  Add16(a=in, b[0]=1, out=out);
}
`)
.test(`
|        in        |       out        |
| 0000000000000000 | 0000000000000001 |
| 1111111111111111 | 0000000000000000 |
| 0000000000000101 | 0000000000000110 |
| 1111111111111011 | 1111111111111100 |
`)

export const ALU = new ChipDef(`
CHIP ALU {
  IN zx, nx, zy, ny, f, no, x[16], y[16];
  OUT out[16], zr, ng;

  PARTS:
  Mux16(sel=zx, a=x, b=0, out=x1);
  Mux16(sel=zy, a=y, b=0, out=y1);
  Not16(in=x1, out=nx1);
  Not16(in=y1, out=ny1);
  Mux16(sel=nx, a=x1, b=nx1, out=x2);
  Mux16(sel=ny, a=y1, b=ny1, out=y2);
  And16(a=x2, b=y2, out=and);
  Add16(a=x2, b=y2, out=add);
  Mux16(sel=f, a=and, b=add, out=res);
  Not16(in=res, out=nres);
  Mux16(sel=no, a=res, b=nres, out=out);
  Or16Way(in=out, out=nz);
  Not(in=nz, out=zr);
  Or(a=out[15], b=0, out=ng);
}`).test(`
|        x         |        y         |zx |nx |zy |ny | f |no |       out        |zr |ng |
| 0000000000000000 | 1111111111111111 | 1 | 0 | 1 | 0 | 1 | 0 | 0000000000000000 | 1 | 0 |
| 0000000000000000 | 1111111111111111 | 1 | 1 | 1 | 1 | 1 | 1 | 0000000000000001 | 0 | 0 |
| 0000000000000000 | 1111111111111111 | 1 | 1 | 1 | 0 | 1 | 0 | 1111111111111111 | 0 | 1 |
| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 0 | 0 | 0000000000000000 | 1 | 0 |
| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 0 | 0 | 1111111111111111 | 0 | 1 |
| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 0 | 1 | 1111111111111111 | 0 | 1 |
| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 0 | 1 | 0000000000000000 | 1 | 0 |
| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 1 | 1 | 0000000000000000 | 1 | 0 |
| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 1 | 1 | 0000000000000001 | 0 | 0 |
| 0000000000000000 | 1111111111111111 | 0 | 1 | 1 | 1 | 1 | 1 | 0000000000000001 | 0 | 0 |
| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 1 | 1 | 1 | 0000000000000000 | 1 | 0 |
| 0000000000000000 | 1111111111111111 | 0 | 0 | 1 | 1 | 1 | 0 | 1111111111111111 | 0 | 1 |
| 0000000000000000 | 1111111111111111 | 1 | 1 | 0 | 0 | 1 | 0 | 1111111111111110 | 0 | 1 |
| 0000000000000000 | 1111111111111111 | 0 | 0 | 0 | 0 | 1 | 0 | 1111111111111111 | 0 | 1 |
| 0000000000000000 | 1111111111111111 | 0 | 1 | 0 | 0 | 1 | 1 | 0000000000000001 | 0 | 0 |
| 0000000000000000 | 1111111111111111 | 0 | 0 | 0 | 1 | 1 | 1 | 1111111111111111 | 0 | 1 |
| 0000000000000000 | 1111111111111111 | 0 | 0 | 0 | 0 | 0 | 0 | 0000000000000000 | 1 | 0 |
| 0000000000000000 | 1111111111111111 | 0 | 1 | 0 | 1 | 0 | 1 | 1111111111111111 | 0 | 1 |
| 0000000000010001 | 0000000000000011 | 1 | 0 | 1 | 0 | 1 | 0 | 0000000000000000 | 1 | 0 |
| 0000000000010001 | 0000000000000011 | 1 | 1 | 1 | 1 | 1 | 1 | 0000000000000001 | 0 | 0 |
| 0000000000010001 | 0000000000000011 | 1 | 1 | 1 | 0 | 1 | 0 | 1111111111111111 | 0 | 1 |
| 0000000000010001 | 0000000000000011 | 0 | 0 | 1 | 1 | 0 | 0 | 0000000000010001 | 0 | 0 |
| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 0 | 0 | 0 | 0000000000000011 | 0 | 0 |
| 0000000000010001 | 0000000000000011 | 0 | 0 | 1 | 1 | 0 | 1 | 1111111111101110 | 0 | 1 |
| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 0 | 0 | 1 | 1111111111111100 | 0 | 1 |
| 0000000000010001 | 0000000000000011 | 0 | 0 | 1 | 1 | 1 | 1 | 1111111111101111 | 0 | 1 |
| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 0 | 1 | 1 | 1111111111111101 | 0 | 1 |
| 0000000000010001 | 0000000000000011 | 0 | 1 | 1 | 1 | 1 | 1 | 0000000000010010 | 0 | 0 |
| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 1 | 1 | 1 | 0000000000000100 | 0 | 0 |
| 0000000000010001 | 0000000000000011 | 0 | 0 | 1 | 1 | 1 | 0 | 0000000000010000 | 0 | 0 |
| 0000000000010001 | 0000000000000011 | 1 | 1 | 0 | 0 | 1 | 0 | 0000000000000010 | 0 | 0 |
| 0000000000010001 | 0000000000000011 | 0 | 0 | 0 | 0 | 1 | 0 | 0000000000010100 | 0 | 0 |
| 0000000000010001 | 0000000000000011 | 0 | 1 | 0 | 0 | 1 | 1 | 0000000000001110 | 0 | 0 |
| 0000000000010001 | 0000000000000011 | 0 | 0 | 0 | 1 | 1 | 1 | 1111111111110010 | 0 | 1 |
| 0000000000010001 | 0000000000000011 | 0 | 0 | 0 | 0 | 0 | 0 | 0000000000000001 | 0 | 0 |
| 0000000000010001 | 0000000000000011 | 0 | 1 | 0 | 1 | 0 | 1 | 0000000000010011 | 0 | 0 |
`)

export const Bit = new ChipDef(`
CHIP Bit {
  IN in, load;
  OUT out;

  PARTS:
  Mux(a=feedback, b=in, sel=load, out=val);
  DFF(in=val, out=feedback);
  Copy(in=feedback, out=out);
}`).test(`
| time | in  |load | out |
| 0+   |  0  |  0  |  0  |
| 1    |  0  |  0  |  0  |
| 1+   |  0  |  1  |  0  |
| 2    |  0  |  1  |  0  |
| 2+   |  1  |  0  |  0  |
| 3    |  1  |  0  |  0  |
| 3+   |  1  |  1  |  0  |
| 4    |  1  |  1  |  1  |
| 4+   |  0  |  0  |  1  |
| 5    |  0  |  0  |  1  |
| 5+   |  1  |  0  |  1  |
| 6    |  1  |  0  |  1  |
| 6+   |  0  |  1  |  1  |
| 7    |  0  |  1  |  0  |
| 7+   |  1  |  1  |  0  |
| 8    |  1  |  1  |  1  |
| 8+   |  0  |  0  |  1  |
| 9    |  0  |  0  |  1  |
| 9+   |  0  |  0  |  1  |
| 10   |  0  |  0  |  1  |
| 10+  |  0  |  0  |  1  |
| 11   |  0  |  0  |  1  |
| 11+  |  0  |  0  |  1  |
| 12   |  0  |  0  |  1  |
| 12+  |  0  |  0  |  1  |
| 13   |  0  |  0  |  1  |
| 13+  |  0  |  0  |  1  |
| 14   |  0  |  0  |  1  |
| 14+  |  0  |  0  |  1  |
| 15   |  0  |  0  |  1  |
| 15+  |  0  |  0  |  1  |
| 16   |  0  |  0  |  1  |
| 16+  |  0  |  0  |  1  |
| 17   |  0  |  0  |  1  |
| 17+  |  0  |  0  |  1  |
| 18   |  0  |  0  |  1  |
| 18+  |  0  |  0  |  1  |
| 19   |  0  |  0  |  1  |
| 19+  |  0  |  0  |  1  |
| 20   |  0  |  0  |  1  |
| 20+  |  0  |  0  |  1  |
| 21   |  0  |  0  |  1  |
| 21+  |  0  |  0  |  1  |
| 22   |  0  |  0  |  1  |
| 22+  |  0  |  0  |  1  |
| 23   |  0  |  0  |  1  |
| 23+  |  0  |  0  |  1  |
| 24   |  0  |  0  |  1  |
| 24+  |  0  |  0  |  1  |
| 25   |  0  |  0  |  1  |
| 25+  |  0  |  0  |  1  |
| 26   |  0  |  0  |  1  |
| 26+  |  0  |  0  |  1  |
| 27   |  0  |  0  |  1  |
| 27+  |  0  |  0  |  1  |
| 28   |  0  |  0  |  1  |
| 28+  |  0  |  0  |  1  |
| 29   |  0  |  0  |  1  |
| 29+  |  0  |  0  |  1  |
| 30   |  0  |  0  |  1  |
| 30+  |  0  |  0  |  1  |
| 31   |  0  |  0  |  1  |
| 31+  |  0  |  0  |  1  |
| 32   |  0  |  0  |  1  |
| 32+  |  0  |  0  |  1  |
| 33   |  0  |  0  |  1  |
| 33+  |  0  |  0  |  1  |
| 34   |  0  |  0  |  1  |
| 34+  |  0  |  0  |  1  |
| 35   |  0  |  0  |  1  |
| 35+  |  0  |  0  |  1  |
| 36   |  0  |  0  |  1  |
| 36+  |  0  |  0  |  1  |
| 37   |  0  |  0  |  1  |
| 37+  |  0  |  0  |  1  |
| 38   |  0  |  0  |  1  |
| 38+  |  0  |  0  |  1  |
| 39   |  0  |  0  |  1  |
| 39+  |  0  |  0  |  1  |
| 40   |  0  |  0  |  1  |
| 40+  |  0  |  0  |  1  |
| 41   |  0  |  0  |  1  |
| 41+  |  0  |  0  |  1  |
| 42   |  0  |  0  |  1  |
| 42+  |  0  |  0  |  1  |
| 43   |  0  |  0  |  1  |
| 43+  |  0  |  0  |  1  |
| 44   |  0  |  0  |  1  |
| 44+  |  0  |  0  |  1  |
| 45   |  0  |  0  |  1  |
| 45+  |  0  |  0  |  1  |
| 46   |  0  |  0  |  1  |
| 46+  |  0  |  0  |  1  |
| 47   |  0  |  0  |  1  |
| 47+  |  0  |  0  |  1  |
| 48   |  0  |  0  |  1  |
| 48+  |  0  |  0  |  1  |
| 49   |  0  |  0  |  1  |
| 49+  |  0  |  0  |  1  |
| 50   |  0  |  0  |  1  |
| 50+  |  0  |  0  |  1  |
| 51   |  0  |  0  |  1  |
| 51+  |  0  |  0  |  1  |
| 52   |  0  |  0  |  1  |
| 52+  |  0  |  0  |  1  |
| 53   |  0  |  0  |  1  |
| 53+  |  0  |  0  |  1  |
| 54   |  0  |  0  |  1  |
| 54+  |  0  |  0  |  1  |
| 55   |  0  |  0  |  1  |
| 55+  |  0  |  0  |  1  |
| 56   |  0  |  0  |  1  |
| 56+  |  0  |  0  |  1  |
| 57   |  0  |  0  |  1  |
| 57+  |  0  |  1  |  1  |
| 58   |  0  |  1  |  0  |
| 58+  |  1  |  0  |  0  |
| 59   |  1  |  0  |  0  |
| 59+  |  1  |  0  |  0  |
| 60   |  1  |  0  |  0  |
| 60+  |  1  |  0  |  0  |
| 61   |  1  |  0  |  0  |
| 61+  |  1  |  0  |  0  |
| 62   |  1  |  0  |  0  |
| 62+  |  1  |  0  |  0  |
| 63   |  1  |  0  |  0  |
| 63+  |  1  |  0  |  0  |
| 64   |  1  |  0  |  0  |
| 64+  |  1  |  0  |  0  |
| 65   |  1  |  0  |  0  |
| 65+  |  1  |  0  |  0  |
| 66   |  1  |  0  |  0  |
| 66+  |  1  |  0  |  0  |
| 67   |  1  |  0  |  0  |
| 67+  |  1  |  0  |  0  |
| 68   |  1  |  0  |  0  |
| 68+  |  1  |  0  |  0  |
| 69   |  1  |  0  |  0  |
| 69+  |  1  |  0  |  0  |
| 70   |  1  |  0  |  0  |
| 70+  |  1  |  0  |  0  |
| 71   |  1  |  0  |  0  |
| 71+  |  1  |  0  |  0  |
| 72   |  1  |  0  |  0  |
| 72+  |  1  |  0  |  0  |
| 73   |  1  |  0  |  0  |
| 73+  |  1  |  0  |  0  |
| 74   |  1  |  0  |  0  |
| 74+  |  1  |  0  |  0  |
| 75   |  1  |  0  |  0  |
| 75+  |  1  |  0  |  0  |
| 76   |  1  |  0  |  0  |
| 76+  |  1  |  0  |  0  |
| 77   |  1  |  0  |  0  |
| 77+  |  1  |  0  |  0  |
| 78   |  1  |  0  |  0  |
| 78+  |  1  |  0  |  0  |
| 79   |  1  |  0  |  0  |
| 79+  |  1  |  0  |  0  |
| 80   |  1  |  0  |  0  |
| 80+  |  1  |  0  |  0  |
| 81   |  1  |  0  |  0  |
| 81+  |  1  |  0  |  0  |
| 82   |  1  |  0  |  0  |
| 82+  |  1  |  0  |  0  |
| 83   |  1  |  0  |  0  |
| 83+  |  1  |  0  |  0  |
| 84   |  1  |  0  |  0  |
| 84+  |  1  |  0  |  0  |
| 85   |  1  |  0  |  0  |
| 85+  |  1  |  0  |  0  |
| 86   |  1  |  0  |  0  |
| 86+  |  1  |  0  |  0  |
| 87   |  1  |  0  |  0  |
| 87+  |  1  |  0  |  0  |
| 88   |  1  |  0  |  0  |
| 88+  |  1  |  0  |  0  |
| 89   |  1  |  0  |  0  |
| 89+  |  1  |  0  |  0  |
| 90   |  1  |  0  |  0  |
| 90+  |  1  |  0  |  0  |
| 91   |  1  |  0  |  0  |
| 91+  |  1  |  0  |  0  |
| 92   |  1  |  0  |  0  |
| 92+  |  1  |  0  |  0  |
| 93   |  1  |  0  |  0  |
| 93+  |  1  |  0  |  0  |
| 94   |  1  |  0  |  0  |
| 94+  |  1  |  0  |  0  |
| 95   |  1  |  0  |  0  |
| 95+  |  1  |  0  |  0  |
| 96   |  1  |  0  |  0  |
| 96+  |  1  |  0  |  0  |
| 97   |  1  |  0  |  0  |
| 97+  |  1  |  0  |  0  |
| 98   |  1  |  0  |  0  |
| 98+  |  1  |  0  |  0  |
| 99   |  1  |  0  |  0  |
| 99+  |  1  |  0  |  0  |
| 100  |  1  |  0  |  0  |
| 100+ |  1  |  0  |  0  |
| 101  |  1  |  0  |  0  |
| 101+ |  1  |  0  |  0  |
| 102  |  1  |  0  |  0  |
| 102+ |  1  |  0  |  0  |
| 103  |  1  |  0  |  0  |
| 103+ |  1  |  0  |  0  |
| 104  |  1  |  0  |  0  |
| 104+ |  1  |  0  |  0  |
| 105  |  1  |  0  |  0  |
| 105+ |  1  |  0  |  0  |
| 106  |  1  |  0  |  0  |
| 106+ |  1  |  0  |  0  |
| 107  |  1  |  0  |  0  |
`)

export const Register = new ChipDef(`
CHIP Register {
  IN in[16], load;
  OUT out[16];

  PARTS:
  Bit(in=in[0], load=load, out=out[0]);
  Bit(in=in[1], load=load, out=out[1]);
  Bit(in=in[2], load=load, out=out[2]);
  Bit(in=in[3], load=load, out=out[3]);
  Bit(in=in[4], load=load, out=out[4]);
  Bit(in=in[5], load=load, out=out[5]);
  Bit(in=in[6], load=load, out=out[6]);
  Bit(in=in[7], load=load, out=out[7]);
  Bit(in=in[8], load=load, out=out[8]);
  Bit(in=in[9], load=load, out=out[9]);
  Bit(in=in[10], load=load, out=out[10]);
  Bit(in=in[11], load=load, out=out[11]);
  Bit(in=in[12], load=load, out=out[12]);
  Bit(in=in[13], load=load, out=out[13]);
  Bit(in=in[14], load=load, out=out[14]);
  Bit(in=in[15], load=load, out=out[15]);
}`).test(`
| time |         in       |load |        out       |
| 0+   | 0000000000000000 |  0  | 0000000000000000 |
| 1    | 0000000000000000 |  0  | 0000000000000000 |
| 1+   | 0000000000000000 |  1  | 0000000000000000 |
| 2    | 0000000000000000 |  1  | 0000000000000000 |
| 2+   | 1000001010000010 |  0  | 0000000000000000 |
| 3    | 1000001010000010 |  0  | 0000000000000000 |
| 3+   | 0000000000011111 |  0  | 0000000000000000 |
| 4    | 0000000000011111 |  0  | 0000000000000000 |
| 4+   | 1000001010000010 |  1  | 0000000000000000 |
| 5    | 1000001010000010 |  1  | 1000001010000010 |
| 5+   | 1000001010000010 |  1  | 1000001010000010 |
| 6    | 1000001010000010 |  1  | 1000001010000010 |
| 6+   | 1000001010000010 |  0  | 1000001010000010 |
| 7    | 1000001010000010 |  0  | 1000001010000010 |
| 7+   | 0011000000111001 |  1  | 1000001010000010 |
| 8    | 0011000000111001 |  1  | 0011000000111001 |
| 8+   | 0000000000000000 |  0  | 0011000000111001 |
| 9    | 0000000000000000 |  0  | 0011000000111001 |
| 9+   | 0000000000000000 |  1  | 0011000000111001 |
| 10   | 0000000000000000 |  1  | 0000000000000000 |
| 10+  | 0000000000000001 |  0  | 0000000000000000 |
| 11   | 0000000000000001 |  0  | 0000000000000000 |
| 11+  | 0000000000000001 |  1  | 0000000000000000 |
| 12   | 0000000000000001 |  1  | 0000000000000001 |
| 12+  | 0000000000000010 |  0  | 0000000000000001 |
| 13   | 0000000000000010 |  0  | 0000000000000001 |
| 13+  | 0000000000000010 |  1  | 0000000000000001 |
| 14   | 0000000000000010 |  1  | 0000000000000010 |
| 14+  | 0000000000000100 |  0  | 0000000000000010 |
| 15   | 0000000000000100 |  0  | 0000000000000010 |
| 15+  | 0000000000000100 |  1  | 0000000000000010 |
| 16   | 0000000000000100 |  1  | 0000000000000100 |
| 16+  | 0000000000001000 |  0  | 0000000000000100 |
| 17   | 0000000000001000 |  0  | 0000000000000100 |
| 17+  | 0000000000001000 |  1  | 0000000000000100 |
| 18   | 0000000000001000 |  1  | 0000000000001000 |
| 18+  | 0000000000010000 |  0  | 0000000000001000 |
| 19   | 0000000000010000 |  0  | 0000000000001000 |
| 19+  | 0000000000010000 |  1  | 0000000000001000 |
| 20   | 0000000000010000 |  1  | 0000000000010000 |
| 20+  | 0000000000100000 |  0  | 0000000000010000 |
| 21   | 0000000000100000 |  0  | 0000000000010000 |
| 21+  | 0000000000100000 |  1  | 0000000000010000 |
| 22   | 0000000000100000 |  1  | 0000000000100000 |
| 22+  | 0000000001000000 |  0  | 0000000000100000 |
| 23   | 0000000001000000 |  0  | 0000000000100000 |
| 23+  | 0000000001000000 |  1  | 0000000000100000 |
| 24   | 0000000001000000 |  1  | 0000000001000000 |
| 24+  | 0000000010000000 |  0  | 0000000001000000 |
| 25   | 0000000010000000 |  0  | 0000000001000000 |
| 25+  | 0000000010000000 |  1  | 0000000001000000 |
| 26   | 0000000010000000 |  1  | 0000000010000000 |
| 26+  | 0000000100000000 |  0  | 0000000010000000 |
| 27   | 0000000100000000 |  0  | 0000000010000000 |
| 27+  | 0000000100000000 |  1  | 0000000010000000 |
| 28   | 0000000100000000 |  1  | 0000000100000000 |
| 28+  | 0000001000000000 |  0  | 0000000100000000 |
| 29   | 0000001000000000 |  0  | 0000000100000000 |
| 29+  | 0000001000000000 |  1  | 0000000100000000 |
| 30   | 0000001000000000 |  1  | 0000001000000000 |
| 30+  | 0000010000000000 |  0  | 0000001000000000 |
| 31   | 0000010000000000 |  0  | 0000001000000000 |
| 31+  | 0000010000000000 |  1  | 0000001000000000 |
| 32   | 0000010000000000 |  1  | 0000010000000000 |
| 32+  | 0000100000000000 |  0  | 0000010000000000 |
| 33   | 0000100000000000 |  0  | 0000010000000000 |
| 33+  | 0000100000000000 |  1  | 0000010000000000 |
| 34   | 0000100000000000 |  1  | 0000100000000000 |
| 34+  | 0001000000000000 |  0  | 0000100000000000 |
| 35   | 0001000000000000 |  0  | 0000100000000000 |
| 35+  | 0001000000000000 |  1  | 0000100000000000 |
| 36   | 0001000000000000 |  1  | 0001000000000000 |
| 36+  | 0010000000000000 |  0  | 0001000000000000 |
| 37   | 0010000000000000 |  0  | 0001000000000000 |
| 37+  | 0010000000000000 |  1  | 0001000000000000 |
| 38   | 0010000000000000 |  1  | 0010000000000000 |
| 38+  | 0100000000000000 |  0  | 0010000000000000 |
| 39   | 0100000000000000 |  0  | 0010000000000000 |
| 39+  | 0100000000000000 |  1  | 0010000000000000 |
| 40   | 0100000000000000 |  1  | 0100000000000000 |
| 40+  | 1000000000000000 |  0  | 0100000000000000 |
| 41   | 1000000000000000 |  0  | 0100000000000000 |
| 41+  | 1000000000000000 |  1  | 0100000000000000 |
| 42   | 1000000000000000 |  1  | 1000000000000000 |
| 42+  | 1111111111111110 |  0  | 1000000000000000 |
| 43   | 1111111111111110 |  0  | 1000000000000000 |
| 43+  | 1111111111111110 |  1  | 1000000000000000 |
| 44   | 1111111111111110 |  1  | 1111111111111110 |
| 44+  | 1111111111111101 |  0  | 1111111111111110 |
| 45   | 1111111111111101 |  0  | 1111111111111110 |
| 45+  | 1111111111111101 |  1  | 1111111111111110 |
| 46   | 1111111111111101 |  1  | 1111111111111101 |
| 46+  | 1111111111111011 |  0  | 1111111111111101 |
| 47   | 1111111111111011 |  0  | 1111111111111101 |
| 47+  | 1111111111111011 |  1  | 1111111111111101 |
| 48   | 1111111111111011 |  1  | 1111111111111011 |
| 48+  | 1111111111110111 |  0  | 1111111111111011 |
| 49   | 1111111111110111 |  0  | 1111111111111011 |
| 49+  | 1111111111110111 |  1  | 1111111111111011 |
| 50   | 1111111111110111 |  1  | 1111111111110111 |
| 50+  | 1111111111101111 |  0  | 1111111111110111 |
| 51   | 1111111111101111 |  0  | 1111111111110111 |
| 51+  | 1111111111101111 |  1  | 1111111111110111 |
| 52   | 1111111111101111 |  1  | 1111111111101111 |
| 52+  | 1111111111011111 |  0  | 1111111111101111 |
| 53   | 1111111111011111 |  0  | 1111111111101111 |
| 53+  | 1111111111011111 |  1  | 1111111111101111 |
| 54   | 1111111111011111 |  1  | 1111111111011111 |
| 54+  | 1111111110111111 |  0  | 1111111111011111 |
| 55   | 1111111110111111 |  0  | 1111111111011111 |
| 55+  | 1111111110111111 |  1  | 1111111111011111 |
| 56   | 1111111110111111 |  1  | 1111111110111111 |
| 56+  | 1111111101111111 |  0  | 1111111110111111 |
| 57   | 1111111101111111 |  0  | 1111111110111111 |
| 57+  | 1111111101111111 |  1  | 1111111110111111 |
| 58   | 1111111101111111 |  1  | 1111111101111111 |
| 58+  | 1111111011111111 |  0  | 1111111101111111 |
| 59   | 1111111011111111 |  0  | 1111111101111111 |
| 59+  | 1111111011111111 |  1  | 1111111101111111 |
| 60   | 1111111011111111 |  1  | 1111111011111111 |
| 60+  | 1111110111111111 |  0  | 1111111011111111 |
| 61   | 1111110111111111 |  0  | 1111111011111111 |
| 61+  | 1111110111111111 |  1  | 1111111011111111 |
| 62   | 1111110111111111 |  1  | 1111110111111111 |
| 62+  | 1111101111111111 |  0  | 1111110111111111 |
| 63   | 1111101111111111 |  0  | 1111110111111111 |
| 63+  | 1111101111111111 |  1  | 1111110111111111 |
| 64   | 1111101111111111 |  1  | 1111101111111111 |
| 64+  | 1111011111111111 |  0  | 1111101111111111 |
| 65   | 1111011111111111 |  0  | 1111101111111111 |
| 65+  | 1111011111111111 |  1  | 1111101111111111 |
| 66   | 1111011111111111 |  1  | 1111011111111111 |
| 66+  | 1110111111111111 |  0  | 1111011111111111 |
| 67   | 1110111111111111 |  0  | 1111011111111111 |
| 67+  | 1110111111111111 |  1  | 1111011111111111 |
| 68   | 1110111111111111 |  1  | 1110111111111111 |
| 68+  | 1101111111111111 |  0  | 1110111111111111 |
| 69   | 1101111111111111 |  0  | 1110111111111111 |
| 69+  | 1101111111111111 |  1  | 1110111111111111 |
| 70   | 1101111111111111 |  1  | 1101111111111111 |
| 70+  | 1011111111111111 |  0  | 1101111111111111 |
| 71   | 1011111111111111 |  0  | 1101111111111111 |
| 71+  | 1011111111111111 |  1  | 1101111111111111 |
| 72   | 1011111111111111 |  1  | 1011111111111111 |
| 72+  | 0111111111111111 |  0  | 1011111111111111 |
| 73   | 0111111111111111 |  0  | 1011111111111111 |
| 73+  | 0111111111111111 |  1  | 1011111111111111 |
| 74   | 0111111111111111 |  1  | 0111111111111111 |
`)
