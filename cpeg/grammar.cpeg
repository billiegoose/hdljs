-- An attempt at a CPEG metacompiler description

.SYNTAX CPEG

CPEG = { '.SYNTAX' .ID RULES '.END' : CPEG } ;

RULES = { $ RULE : RULES } ;

RULE = { .ID '=' RULEEX ';' : RULE } ;

RULEEX = { EX1 : EXP } ;

EX1 = { EX2 $ ( '/' EX2 ) : ALT } ;

EX2 = { EX3 $ EX3 : SEQ } ;

EX3 = .ID
    / { .STRING : LITERAL }
    / { '.ID' : ID }
    / { '.NUMBER' : NUMBER }
    / { '.STRING' : STRING }
    / { '(' EX1 ')' : GROUP }
    / { '{' EX1 ':' .ID '}' : TYPE }
    / '.EMPTY'
    / { '$' EX3 : REPEAT }
    ;

.END

.COMPILE CPEG

-- provide the .OUT function for each TYPE

Built in types:

.ID -- { [a-zA-Z_][a-zA-Z_0-9]* : ID }
.STRING -- { '[^']' : STRING }
.NUMBER -- { [0-9]+ : NUMBER }
